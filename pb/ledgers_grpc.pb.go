// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: ledgers.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LedgerService_GetAll_FullMethodName                = "/LedgerService/GetAll"
	LedgerService_GetCurrentMonthLedger_FullMethodName = "/LedgerService/GetCurrentMonthLedger"
	LedgerService_GetCurrentYearLedgers_FullMethodName = "/LedgerService/GetCurrentYearLedgers"
	LedgerService_RemoveLedger_FullMethodName          = "/LedgerService/RemoveLedger"
	LedgerService_UpdateLedger_FullMethodName          = "/LedgerService/UpdateLedger"
	LedgerService_CreateLedger_FullMethodName          = "/LedgerService/CreateLedger"
)

// LedgerServiceClient is the client API for LedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LedgerServiceClient interface {
	GetAll(ctx context.Context, in *RequestFilters, opts ...grpc.CallOption) (*ResponseWithLedgers, error)
	GetCurrentMonthLedger(ctx context.Context, in *RequestWithUserId, opts ...grpc.CallOption) (*ResponseWithLedgers, error)
	GetCurrentYearLedgers(ctx context.Context, in *RequestWithUserId, opts ...grpc.CallOption) (*ResponseWithLedgers, error)
	RemoveLedger(ctx context.Context, in *RequestWithLedgerId, opts ...grpc.CallOption) (*ResponseWithLedgers, error)
	UpdateLedger(ctx context.Context, in *RequestWithLedgerId, opts ...grpc.CallOption) (*ResponseWithLedgers, error)
	CreateLedger(ctx context.Context, in *Ledger, opts ...grpc.CallOption) (*ResponseWithLedgers, error)
}

type ledgerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerServiceClient(cc grpc.ClientConnInterface) LedgerServiceClient {
	return &ledgerServiceClient{cc}
}

func (c *ledgerServiceClient) GetAll(ctx context.Context, in *RequestFilters, opts ...grpc.CallOption) (*ResponseWithLedgers, error) {
	out := new(ResponseWithLedgers)
	err := c.cc.Invoke(ctx, LedgerService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) GetCurrentMonthLedger(ctx context.Context, in *RequestWithUserId, opts ...grpc.CallOption) (*ResponseWithLedgers, error) {
	out := new(ResponseWithLedgers)
	err := c.cc.Invoke(ctx, LedgerService_GetCurrentMonthLedger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) GetCurrentYearLedgers(ctx context.Context, in *RequestWithUserId, opts ...grpc.CallOption) (*ResponseWithLedgers, error) {
	out := new(ResponseWithLedgers)
	err := c.cc.Invoke(ctx, LedgerService_GetCurrentYearLedgers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) RemoveLedger(ctx context.Context, in *RequestWithLedgerId, opts ...grpc.CallOption) (*ResponseWithLedgers, error) {
	out := new(ResponseWithLedgers)
	err := c.cc.Invoke(ctx, LedgerService_RemoveLedger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) UpdateLedger(ctx context.Context, in *RequestWithLedgerId, opts ...grpc.CallOption) (*ResponseWithLedgers, error) {
	out := new(ResponseWithLedgers)
	err := c.cc.Invoke(ctx, LedgerService_UpdateLedger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) CreateLedger(ctx context.Context, in *Ledger, opts ...grpc.CallOption) (*ResponseWithLedgers, error) {
	out := new(ResponseWithLedgers)
	err := c.cc.Invoke(ctx, LedgerService_CreateLedger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerServiceServer is the server API for LedgerService service.
// All implementations must embed UnimplementedLedgerServiceServer
// for forward compatibility
type LedgerServiceServer interface {
	GetAll(context.Context, *RequestFilters) (*ResponseWithLedgers, error)
	GetCurrentMonthLedger(context.Context, *RequestWithUserId) (*ResponseWithLedgers, error)
	GetCurrentYearLedgers(context.Context, *RequestWithUserId) (*ResponseWithLedgers, error)
	RemoveLedger(context.Context, *RequestWithLedgerId) (*ResponseWithLedgers, error)
	UpdateLedger(context.Context, *RequestWithLedgerId) (*ResponseWithLedgers, error)
	CreateLedger(context.Context, *Ledger) (*ResponseWithLedgers, error)
	mustEmbedUnimplementedLedgerServiceServer()
}

// UnimplementedLedgerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLedgerServiceServer struct {
}

func (UnimplementedLedgerServiceServer) GetAll(context.Context, *RequestFilters) (*ResponseWithLedgers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedLedgerServiceServer) GetCurrentMonthLedger(context.Context, *RequestWithUserId) (*ResponseWithLedgers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentMonthLedger not implemented")
}
func (UnimplementedLedgerServiceServer) GetCurrentYearLedgers(context.Context, *RequestWithUserId) (*ResponseWithLedgers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentYearLedgers not implemented")
}
func (UnimplementedLedgerServiceServer) RemoveLedger(context.Context, *RequestWithLedgerId) (*ResponseWithLedgers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLedger not implemented")
}
func (UnimplementedLedgerServiceServer) UpdateLedger(context.Context, *RequestWithLedgerId) (*ResponseWithLedgers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLedger not implemented")
}
func (UnimplementedLedgerServiceServer) CreateLedger(context.Context, *Ledger) (*ResponseWithLedgers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLedger not implemented")
}
func (UnimplementedLedgerServiceServer) mustEmbedUnimplementedLedgerServiceServer() {}

// UnsafeLedgerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedgerServiceServer will
// result in compilation errors.
type UnsafeLedgerServiceServer interface {
	mustEmbedUnimplementedLedgerServiceServer()
}

func RegisterLedgerServiceServer(s grpc.ServiceRegistrar, srv LedgerServiceServer) {
	s.RegisterService(&LedgerService_ServiceDesc, srv)
}

func _LedgerService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).GetAll(ctx, req.(*RequestFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_GetCurrentMonthLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).GetCurrentMonthLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_GetCurrentMonthLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).GetCurrentMonthLedger(ctx, req.(*RequestWithUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_GetCurrentYearLedgers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).GetCurrentYearLedgers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_GetCurrentYearLedgers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).GetCurrentYearLedgers(ctx, req.(*RequestWithUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_RemoveLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithLedgerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).RemoveLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_RemoveLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).RemoveLedger(ctx, req.(*RequestWithLedgerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_UpdateLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithLedgerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).UpdateLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_UpdateLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).UpdateLedger(ctx, req.(*RequestWithLedgerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_CreateLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ledger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).CreateLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_CreateLedger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).CreateLedger(ctx, req.(*Ledger))
	}
	return interceptor(ctx, in, info, handler)
}

// LedgerService_ServiceDesc is the grpc.ServiceDesc for LedgerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LedgerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LedgerService",
	HandlerType: (*LedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _LedgerService_GetAll_Handler,
		},
		{
			MethodName: "GetCurrentMonthLedger",
			Handler:    _LedgerService_GetCurrentMonthLedger_Handler,
		},
		{
			MethodName: "GetCurrentYearLedgers",
			Handler:    _LedgerService_GetCurrentYearLedgers_Handler,
		},
		{
			MethodName: "RemoveLedger",
			Handler:    _LedgerService_RemoveLedger_Handler,
		},
		{
			MethodName: "UpdateLedger",
			Handler:    _LedgerService_UpdateLedger_Handler,
		},
		{
			MethodName: "CreateLedger",
			Handler:    _LedgerService_CreateLedger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ledgers.proto",
}
